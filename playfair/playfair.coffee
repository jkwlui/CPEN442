# Pick object attributes that satisfies a predicate
_pick = (object, predicate) ->
  newObject = {}
  for k, v of object
    if predicate(v)
      newObject[k] = v
  # order the objects by decreasing order
  arr = (k: k, v: v for k, v of newObject)
  arr.sort (a, b) -> b.v - a.v
  ordered = {}
  for e in arr
    ordered[e.k] = e.v
  ordered


code = "LTTKIKQYSZTIFIDZGLHTGLATZTGHFNRZLTLTDALXXPTKTVPGFNKSDODSDTCRAZTXLZTVPGFNLTDALPGNKEPXDFKSDTZTGHFNSZEYFTPXQNHWTELXQHZTGHFNPWKFLTTQHEFTEITNQHTSATSZRITXWMKTYDGHFNQHFDIKKTBPLXPRDKTEHLGHZEFTLITVPGFNSZEDGHHRZDSETEQSLTITSLLTTCKCKDRMKIANTEAZLTTENEZLFTMYYAUACKTSLCVHRNRTTXDOLTTFIKRXTEPWZDLAFSQCGSUTXUVLMYXLKEPXHUTNTYRZLTDSFYTVPGFNSZEYFTPXQSLAESPXITGSSLDWKFQFIYXUGMCLFTMUGLDLCYGVXTVLSYFTFGRNTYUTTXLHFDFQAZVGHQFQHLSAWDSNTAKDPNIYNHTYFSDOLTDKDANSFNNMAPZDYAYDIKQCTXFQHLSAWDSNDASGAYQHLTTFGLATNAAUAZONLSIYSLSDANSNTSMIVLTVPGFNAZLTYFIKQKDHKSDTTVPGFNMWDSCLSNCQPRYALOTGZYTYFTFNZNSXSGHAGHYQKDSEFDLIGSNQTESLFEXPYATXHBAZTDGHFNLBSOZXTASERAMNHLGSTVPGFNKCSYAZLTDKTYVHGUSFSEGSTENETVPGFNSZEDGHFNAZSETSGNTLKTIONHGHYAYDGHFNMRLTANFSIYAZPSIHVTQKESIYFIPRHQXPDOLTYASZEYFTKDTXDOLTTATSFBSZTXLTKQSGLZYUPKADIYTXCLSNZSYLKIROUTSKSDLOTAESVQQYKDEIEHPXHLMWYDGHFNGKZDLUDUTDGXDKAZOMNPATKHTVPGFNSZEPDQTKAZOYFSLHGHTYPSMNGLOMDOLSFCTXAYLSYATVWKNQTYPSIOHSLDQHLTAZVYGHFNSNQKTXWKFTLXAPFTLVWUTRARTYSHDQTAGHKEAZTQRTEZWXTEQSRESLYUPKADIYNSPRFTLVWUEDGHFNSZEYFTHTXHFNZYGHFNLTDKYKHXZYGHFNLSQLPSHYPLGLOMLTTATSBDGHFNSZYRHDFTHLSAWDSNTQHEFTTSLNTESLLTCFSKLNYTLIKCKDSNRMDKPFADDTQHLVKLFNZNPSBDGHFNSZEYFTKZROKSROOLFTKZUGBRSNQSRFSZTKKTEDGHFNRZLTEZWXAZOYFSCLGLRTFSQCTXAYDWTESDLSIFSKZETESLPKGHLTTAESPXZTGHFNLTTCKCSYAZLSLTTEKIRZMNLXGHTVPGFNLBZDBLSNSKIKQYTVPGFNPWNXTLLXGHTVPGFNETTVKIYTCRSDFSHSFYLBSEHLIKLOAZOYTSGNBTFTDKMKRHIFDKQHZFUWYQLXGMRITXDOLTDKCKSNSGLTAZVYGHFNTSKCQCWDGHFNKDFNKLZFKTZFGLDOLTKFFILDFYSYTVPGFNSZYPEMXPYACRGSETKDCRMTFTFSCPDQYAPWGLOMDOLTDKTESLLTDFLXDXADLSKRYAYLHDSLFTFIFDWDGHFNSZEYIFFDRPYESLSDQNQCHQLDFSLVXTYAHSGMRITXLSFQTVPGFNFTDQHRSAAYRITXESROWTIKQCTXFQTVPGFNXPOMYLHDSLFTDTSRAZVYGHFNNRHLLTTANFKFNTGLNSLVSYFTHLSAWDSNTESLMWYDGHFNXUKFYDLVIKFNZYGHFNDQHXHLWUSETEYUPKADIYTGRYGSYHKFSYSHNETGLMZQTDGXDKTEGXDKEZWXTEQSLRSDMPUWCKSKRHIFDKCTZTGHFNKZHLFTKDHRDNCLSNDQFDZNZXCKXLRESLFSEYGHSETBHVIKRPESROOSQCKPPXHLTVPGFNQHTVWKATTXCHLYLTDKGQGHOSQLZTFTDKMKUSVLTXDSCLSNZKMKUOOSGHCMKEXLTESLZDSZLHNEASOLGVTYFTWPKSFYLTYFSZTXCLPSTBANTXWMLOTANSXUKFDLTKADHESTANPNIYTXYESLPKGHPSIHXSSYQHXZCKTVPGFNLBZDBLGLRTFCLTSEQHLTKFQCKIQYTSLNTFSOETWDGHFNETNAXPMNLSESQKRSEKSNRSOMLOENIHSHNAHWTDGHFNSZYISLLTSEQHLTTQRTYWXPSHSDTNTSFBSZASDVTVPGFNLTDKDAILKFHSSGSMANNAETTXYDIKQCTXFQANQCUDHRKFNSSYLSOSQLSETVPGFNSZEYSTZQKFRSDOLOTQBEGHFNMWDSDSNZXTGLHCHSFYLBSEETDXTANAMNLSRSQCAZTVPGFNHQLDTSATLBSHKESZDCTXTASGLOADLTSEKZCESLSDLVWUCPTKARTKZXAZXNZSTBWKTBTXYSVTGHFNLBSEKZIONSRPSMANEZATKZHLFSLTTDGHFNLBXTPRSYEZKDHQWDIKQCTXFQTVPGFNHTGLRTFSQCPSITKIRZMNLXGHFIAYROKTCRSDPSYDGHFNLBSRDFTQHRCKTSTXEZKDHQXPLTZQTYXHNEYAXLHGLNDXZDTALSQYDSYESLSDATYFHLVHTYFTKWKTQHLTANLVKURITXYTZEMFDKHSSMSNLBSEFTTXTASYKZSYTVPGFNSZTXLTDKFDXHKTFSQCLBSEFTTXTAKZSYTXYHIKXPTEFYSMZQCKZXTATVPGFNSZRITXSYATYFLSKZSYLTYFSZECGLMNNAMNKTEKROOSLZDWTGLYLTSELTTCEZSYQYDOLTYF"

module.exports =
  code: code
  digram: (code) ->
    code = code.split("")
    # split the code into pairs
    pairs = []
    pair = ""
    for i in [1..code.length-1]
      if pair.length is 0
        pair += code.shift()
      else if pair.length is 1
        pair += code.shift()
        pairs.push pair
        pair = ""
    return pairs
  frequency: (pairs, s, d, t) ->
    # take pairs of strings and determine the most frequent pair
    # , di-pair and tri-pair
    single = {}
    for pair in pairs
      single[pair] or= 0
      single[pair]++
    single = _pick(single, (n) -> n > s)

    double = {}
    for i in [1..pairs.length-1]
      quad = pairs[i-1] + pairs[i]
      double[quad] or= 0
      double[quad]++
    double = _pick(double, (n) -> n > d)

    triple = {}
    for i in [2..pairs.length-1]
      hex = pairs[i-2] + pairs[i-1] + pairs[i]
      triple[hex] or= 0
      triple[hex]++
    triple = _pick(triple, (n) -> n > t)

    single: single
    double: double
    triple: triple

  main: ->
    digrams = @digram(code)
    frequencies = @frequency(digrams, 10, 5, 2)
